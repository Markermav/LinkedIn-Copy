[{"/home/maitry/job-portal/frontend/src/index.js":"1","/home/maitry/job-portal/frontend/src/reportWebVitals.js":"2","/home/maitry/job-portal/frontend/src/App.js":"3","/home/maitry/job-portal/frontend/src/component/Welcome.js":"4","/home/maitry/job-portal/frontend/src/component/Logout.js":"5","/home/maitry/job-portal/frontend/src/component/Navbar.js":"6","/home/maitry/job-portal/frontend/src/component/Home.js":"7","/home/maitry/job-portal/frontend/src/component/Applications.js":"8","/home/maitry/job-portal/frontend/src/component/Login.js":"9","/home/maitry/job-portal/frontend/src/component/Signup.js":"10","/home/maitry/job-portal/frontend/src/component/Profile.js":"11","/home/maitry/job-portal/frontend/src/component/recruiter/JobApplications.js":"12","/home/maitry/job-portal/frontend/src/component/recruiter/AcceptedApplicants.js":"13","/home/maitry/job-portal/frontend/src/component/recruiter/CreateJobs.js":"14","/home/maitry/job-portal/frontend/src/component/recruiter/MyJobs.js":"15","/home/maitry/job-portal/frontend/src/lib/isAuth.js":"16","/home/maitry/job-portal/frontend/src/component/recruiter/Profile.js":"17","/home/maitry/job-portal/frontend/src/lib/MessagePopup.js":"18","/home/maitry/job-portal/frontend/src/lib/apiList.js":"19","/home/maitry/job-portal/frontend/src/lib/PasswordInput.js":"20","/home/maitry/job-portal/frontend/src/lib/EmailInput.js":"21","/home/maitry/job-portal/frontend/src/lib/FileUploadInput.js":"22"},{"size":500,"mtime":1689719206493,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1689719206493,"results":"25","hashOfConfig":"24"},{"size":3332,"mtime":1689719206489,"results":"26","hashOfConfig":"24"},{"size":741,"mtime":1689726869660,"results":"27","hashOfConfig":"24"},{"size":489,"mtime":1689719206489,"results":"28","hashOfConfig":"24"},{"size":2567,"mtime":1689726869660,"results":"29","hashOfConfig":"24"},{"size":21018,"mtime":1689729003707,"results":"30","hashOfConfig":"24"},{"size":7330,"mtime":1689729003723,"results":"31","hashOfConfig":"24"},{"size":3542,"mtime":1689719206489,"results":"32","hashOfConfig":"24"},{"size":14295,"mtime":1689719206489,"results":"33","hashOfConfig":"24"},{"size":8518,"mtime":1689719206489,"results":"34","hashOfConfig":"24"},{"size":22206,"mtime":1689719206493,"results":"35","hashOfConfig":"24"},{"size":24341,"mtime":1689719206493,"results":"36","hashOfConfig":"24"},{"size":8138,"mtime":1689719206493,"results":"37","hashOfConfig":"24"},{"size":25679,"mtime":1689729003723,"results":"38","hashOfConfig":"24"},{"size":165,"mtime":1689719206493,"results":"39","hashOfConfig":"24"},{"size":4999,"mtime":1689719206493,"results":"40","hashOfConfig":"24"},{"size":503,"mtime":1689719206493,"results":"41","hashOfConfig":"24"},{"size":437,"mtime":1689719206493,"results":"42","hashOfConfig":"24"},{"size":1666,"mtime":1689719206493,"results":"43","hashOfConfig":"24"},{"size":1167,"mtime":1689719206493,"results":"44","hashOfConfig":"24"},{"size":3279,"mtime":1689719206493,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17a23a6",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/maitry/job-portal/frontend/src/index.js",[],"/home/maitry/job-portal/frontend/src/reportWebVitals.js",[],"/home/maitry/job-portal/frontend/src/App.js",["93"],"/home/maitry/job-portal/frontend/src/component/Welcome.js",[],"/home/maitry/job-portal/frontend/src/component/Logout.js",["94"],"/home/maitry/job-portal/frontend/src/component/Navbar.js",[],["95","96"],"/home/maitry/job-portal/frontend/src/component/Home.js",["97","98","99","100","101","102","103"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport axios from \"axios\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport { userType } from \"../lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  const { job } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [sop, setSop] = useState(\"\");\n\n  const handleClose = () => {\n    setOpen(false);\n    setSop(\"\");\n  };\n\n  const handleApply = () => {\n    console.log(job._id);\n    console.log(sop);\n    axios\n      .post(\n        `${apiList.jobs}/${job._id}/applications`,\n        {\n          sop: sop,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        handleClose();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const deadline = new Date(job.deadline).toLocaleDateString();\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid container item xs={9} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">{job.title}</Typography>\n          </Grid>\n          <Grid item>\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\n          </Grid>\n          <Grid item>Role : {job.jobType}</Grid>\n          <Grid item>Salary : $ {job.salary} per year</Grid>\n          <Grid item>\n            Duration :{\" \"}\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n          </Grid>\n          <Grid item>Posted By : {job.recruiter.name}</Grid>\n          <Grid item>Application Deadline : {deadline}</Grid>\n\n          <Grid item>\n            {job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item xs={3}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            onClick={() => {\n              setOpen(true);\n            }}\n            disabled={userType() === \"recruiter\"}\n          >\n            Apply\n          </Button>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"50%\",\n            alignItems: \"center\",\n          }}\n        >\n          <TextField\n            label=\"Write SOP (upto 250 words)\"\n            multiline\n            rows={8}\n            style={{ width: \"100%\", marginBottom: \"30px\" }}\n            variant=\"outlined\"\n            value={sop}\n            onChange={(event) => {\n              if (\n                event.target.value.split(\" \").filter(function (n) {\n                  return n != \"\";\n                }).length <= 250\n              ) {\n                setSop(event.target.value);\n              }\n            }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            onClick={() => handleApply()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst Home = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] != 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] != 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration != \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setJobs(\n          response.data.filter((obj) => {\n            const today = new Date();\n            const deadline = new Date(obj.deadline);\n            return deadline > today;\n          })\n        );\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid\n          item\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs>\n            <Typography variant=\"h2\">Jobs</Typography>\n          </Grid>\n          <Grid item xs>\n            <TextField\n              label=\"Search Jobs\"\n              value={searchOptions.query}\n              onChange={(event) =>\n                setSearchOptions({\n                  ...searchOptions,\n                  query: event.target.value,\n                })\n              }\n              onKeyPress={(ev) => {\n                if (ev.key === \"Enter\") {\n                  getData();\n                }\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment>\n                    <IconButton onClick={() => getData()}>\n                      <SearchIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              style={{ width: \"500px\" }}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item>\n            <IconButton onClick={() => setFilterOpen(true)}>\n              <FilterListIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {jobs.length > 0 ? (\n            jobs.map((job) => {\n              return <JobTile job={job} />;\n            })\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No jobs found\n            </Typography>\n          )}\n        </Grid>\n        {/* <Grid item>\n          <Pagination count={10} color=\"primary\" />\n        </Grid> */}\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default Home;\n","/home/maitry/job-portal/frontend/src/component/Applications.js",["104","105","106","107","108","109","110","111","112"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst ApplicationTile = (props) => {\n  const classes = useStyles();\n  const { application } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n  const [rating, setRating] = useState(application.job.rating);\n\n  const appliedOn = new Date(application.dateOfApplication);\n  const joinedOn = new Date(application.dateOfJoining);\n\n  const fetchRating = () => {\n    axios\n      .get(`${apiList.rating}?id=${application.job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setRating(response.data.rating);\n        console.log(response.data);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const changeRating = () => {\n    axios\n      .put(\n        apiList.rating,\n        { rating: rating, jobId: application.job._id },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response.data);\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: \"Rating updated successfully\",\n        });\n        fetchRating();\n        setOpen(false);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        fetchRating();\n        setOpen(false);\n      });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const colorSet = {\n    applied: \"#3454D1\",\n    shortlisted: \"#DC851F\",\n    accepted: \"#09BC8A\",\n    rejected: \"#D1345B\",\n    deleted: \"#B49A67\",\n    cancelled: \"#FF8484\",\n    finished: \"#4EA5D9\",\n  };\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid container item xs={9} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">{application.job.title}</Typography>\n          </Grid>\n          <Grid item>Posted By: {application.recruiter.name}</Grid>\n          <Grid item>Role : {application.job.jobType}</Grid>\n          <Grid item>Salary : $ {application.job.salary} per month</Grid>\n          <Grid item>\n            Duration :{\" \"}\n            {application.job.duration !== 0\n              ? `${application.job.duration} month`\n              : `Flexible`}\n          </Grid>\n          <Grid item>\n            {application.job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\n          {application.status === \"accepted\" ||\n          application.status === \"finished\" ? (\n            <Grid item>Joined On: {joinedOn.toLocaleDateString()}</Grid>\n          ) : null}\n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item xs>\n            <Paper\n              className={classes.statusBlock}\n              style={{\n                background: colorSet[application.status],\n                color: \"#ffffff\",\n              }}\n            >\n              {application.status}\n            </Paper>\n          </Grid>\n          {application.status === \"accepted\" ||\n          application.status === \"finished\" ? (\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.statusBlock}\n                onClick={() => {\n                  fetchRating();\n                  setOpen(true);\n                }}\n              >\n                Rate Job\n              </Button>\n            </Grid>\n          ) : null}\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Rating\n            name=\"simple-controlled\"\n            style={{ marginBottom: \"30px\" }}\n            value={rating === -1 ? null : rating}\n            onChange={(event, newValue) => {\n              setRating(newValue);\n            }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            onClick={() => changeRating()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst Applications = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  const [applications, setApplications] = useState([]);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.applications, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setApplications(response.data);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <Grid\n      container\n      item\n      direction=\"column\"\n      alignItems=\"center\"\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\n    >\n      <Grid item>\n        <Typography variant=\"h2\">Applications</Typography>\n      </Grid>\n      <Grid\n        container\n        item\n        xs\n        direction=\"column\"\n        style={{ width: \"100%\" }}\n        alignItems=\"stretch\"\n        justify=\"center\"\n      >\n        {applications.length > 0 ? (\n          applications.map((obj) => (\n            <Grid item>\n              <ApplicationTile application={obj} />\n            </Grid>\n          ))\n        ) : (\n          <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n            No Applications Found\n          </Typography>\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Applications;\n","/home/maitry/job-portal/frontend/src/component/Login.js",["113"],"/home/maitry/job-portal/frontend/src/component/Signup.js",["114","115"],"/home/maitry/job-portal/frontend/src/component/Profile.js",["116","117","118","119","120","121","122"],"/home/maitry/job-portal/frontend/src/component/recruiter/JobApplications.js",["123","124","125","126","127","128"],"/home/maitry/job-portal/frontend/src/component/recruiter/AcceptedApplicants.js",["129","130","131","132","133","134","135","136","137"],"/home/maitry/job-portal/frontend/src/component/recruiter/CreateJobs.js",["138","139"],"/home/maitry/job-portal/frontend/src/component/recruiter/MyJobs.js",["140","141","142","143","144","145"],"/home/maitry/job-portal/frontend/src/lib/isAuth.js",[],"/home/maitry/job-portal/frontend/src/component/recruiter/Profile.js",["146","147","148"],"/home/maitry/job-portal/frontend/src/lib/MessagePopup.js",["149"],"/home/maitry/job-portal/frontend/src/lib/apiList.js",[],"/home/maitry/job-portal/frontend/src/lib/PasswordInput.js",[],"/home/maitry/job-portal/frontend/src/lib/EmailInput.js",[],"/home/maitry/job-portal/frontend/src/lib/FileUploadInput.js",[],{"ruleId":"150","severity":1,"message":"151","line":19,"column":8,"nodeType":"152","messageId":"153","endLine":19,"endColumn":14},{"ruleId":"154","severity":1,"message":"155","line":16,"column":6,"nodeType":"156","endLine":16,"endColumn":8,"suggestions":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"150","severity":1,"message":"162","line":15,"column":3,"nodeType":"152","messageId":"153","endLine":15,"endColumn":12},{"ruleId":"150","severity":1,"message":"163","line":20,"column":8,"nodeType":"152","messageId":"153","endLine":20,"endColumn":18},{"ruleId":"164","severity":1,"message":"165","line":164,"column":28,"nodeType":"166","messageId":"167","endLine":164,"endColumn":30},{"ruleId":"154","severity":1,"message":"168","line":547,"column":6,"nodeType":"156","endLine":547,"endColumn":8,"suggestions":"169"},{"ruleId":"164","severity":1,"message":"165","line":563,"column":33,"nodeType":"166","messageId":"167","endLine":563,"endColumn":35},{"ruleId":"164","severity":1,"message":"165","line":569,"column":33,"nodeType":"166","messageId":"167","endLine":569,"endColumn":35},{"ruleId":"164","severity":1,"message":"165","line":575,"column":32,"nodeType":"166","messageId":"167","endLine":575,"endColumn":34},{"ruleId":"150","severity":1,"message":"170","line":6,"column":3,"nodeType":"152","messageId":"153","endLine":6,"endColumn":13},{"ruleId":"150","severity":1,"message":"171","line":7,"column":3,"nodeType":"152","messageId":"153","endLine":7,"endColumn":17},{"ruleId":"150","severity":1,"message":"172","line":10,"column":3,"nodeType":"152","messageId":"153","endLine":10,"endColumn":12},{"ruleId":"150","severity":1,"message":"173","line":13,"column":3,"nodeType":"152","messageId":"153","endLine":13,"endColumn":9},{"ruleId":"150","severity":1,"message":"174","line":14,"column":3,"nodeType":"152","messageId":"153","endLine":14,"endColumn":19},{"ruleId":"150","severity":1,"message":"162","line":15,"column":3,"nodeType":"152","messageId":"153","endLine":15,"endColumn":12},{"ruleId":"150","severity":1,"message":"175","line":16,"column":3,"nodeType":"152","messageId":"153","endLine":16,"endColumn":11},{"ruleId":"150","severity":1,"message":"176","line":17,"column":3,"nodeType":"152","messageId":"153","endLine":17,"endColumn":11},{"ruleId":"154","severity":1,"message":"168","line":229,"column":6,"nodeType":"156","endLine":229,"endColumn":8,"suggestions":"177"},{"ruleId":"150","severity":1,"message":"172","line":4,"column":3,"nodeType":"152","messageId":"153","endLine":4,"endColumn":12},{"ruleId":"150","severity":1,"message":"178","line":10,"column":3,"nodeType":"152","messageId":"153","endLine":10,"endColumn":8},{"ruleId":"164","severity":1,"message":"165","line":459,"column":32,"nodeType":"166","messageId":"167","endLine":459,"endColumn":34},{"ruleId":"150","severity":1,"message":"179","line":6,"column":3,"nodeType":"152","messageId":"153","endLine":6,"endColumn":8},{"ruleId":"150","severity":1,"message":"180","line":109,"column":10,"nodeType":"152","messageId":"153","endLine":109,"endColumn":18},{"ruleId":"150","severity":1,"message":"181","line":109,"column":20,"nodeType":"152","messageId":"153","endLine":109,"endColumn":31},{"ruleId":"150","severity":1,"message":"182","line":110,"column":10,"nodeType":"152","messageId":"153","endLine":110,"endColumn":14},{"ruleId":"154","severity":1,"message":"168","line":137,"column":6,"nodeType":"156","endLine":137,"endColumn":8,"suggestions":"183"},{"ruleId":"150","severity":1,"message":"184","line":169,"column":9,"nodeType":"152","messageId":"153","endLine":169,"endColumn":20},{"ruleId":"150","severity":1,"message":"185","line":173,"column":9,"nodeType":"152","messageId":"153","endLine":173,"endColumn":20},{"ruleId":"150","severity":1,"message":"171","line":7,"column":3,"nodeType":"152","messageId":"153","endLine":7,"endColumn":17},{"ruleId":"150","severity":1,"message":"172","line":10,"column":3,"nodeType":"152","messageId":"153","endLine":10,"endColumn":12},{"ruleId":"150","severity":1,"message":"173","line":13,"column":3,"nodeType":"152","messageId":"153","endLine":13,"endColumn":9},{"ruleId":"150","severity":1,"message":"162","line":15,"column":3,"nodeType":"152","messageId":"153","endLine":15,"endColumn":12},{"ruleId":"150","severity":1,"message":"175","line":16,"column":3,"nodeType":"152","messageId":"153","endLine":16,"endColumn":11},{"ruleId":"154","severity":1,"message":"168","line":668,"column":6,"nodeType":"156","endLine":668,"endColumn":8,"suggestions":"186"},{"ruleId":"150","severity":1,"message":"171","line":7,"column":3,"nodeType":"152","messageId":"153","endLine":7,"endColumn":17},{"ruleId":"150","severity":1,"message":"172","line":10,"column":3,"nodeType":"152","messageId":"153","endLine":10,"endColumn":12},{"ruleId":"150","severity":1,"message":"173","line":13,"column":3,"nodeType":"152","messageId":"153","endLine":13,"endColumn":9},{"ruleId":"150","severity":1,"message":"174","line":14,"column":3,"nodeType":"152","messageId":"153","endLine":14,"endColumn":19},{"ruleId":"150","severity":1,"message":"162","line":15,"column":3,"nodeType":"152","messageId":"153","endLine":15,"endColumn":12},{"ruleId":"150","severity":1,"message":"175","line":16,"column":3,"nodeType":"152","messageId":"153","endLine":16,"endColumn":11},{"ruleId":"150","severity":1,"message":"187","line":20,"column":10,"nodeType":"152","messageId":"153","endLine":20,"endColumn":19},{"ruleId":"150","severity":1,"message":"188","line":450,"column":9,"nodeType":"152","messageId":"153","endLine":450,"endColumn":17},{"ruleId":"154","severity":1,"message":"168","line":717,"column":6,"nodeType":"156","endLine":717,"endColumn":8,"suggestions":"189"},{"ruleId":"150","severity":1,"message":"190","line":1,"column":22,"nodeType":"152","messageId":"153","endLine":1,"endColumn":31},{"ruleId":"150","severity":1,"message":"179","line":6,"column":3,"nodeType":"152","messageId":"153","endLine":6,"endColumn":8},{"ruleId":"150","severity":1,"message":"162","line":15,"column":3,"nodeType":"152","messageId":"153","endLine":15,"endColumn":12},{"ruleId":"150","severity":1,"message":"163","line":21,"column":8,"nodeType":"152","messageId":"153","endLine":21,"endColumn":18},{"ruleId":"154","severity":1,"message":"168","line":714,"column":6,"nodeType":"156","endLine":714,"endColumn":8,"suggestions":"191"},{"ruleId":"164","severity":1,"message":"165","line":730,"column":33,"nodeType":"166","messageId":"167","endLine":730,"endColumn":35},{"ruleId":"164","severity":1,"message":"165","line":736,"column":33,"nodeType":"166","messageId":"167","endLine":736,"endColumn":35},{"ruleId":"164","severity":1,"message":"165","line":742,"column":32,"nodeType":"166","messageId":"167","endLine":742,"endColumn":34},{"ruleId":"150","severity":1,"message":"179","line":6,"column":3,"nodeType":"152","messageId":"153","endLine":6,"endColumn":8},{"ruleId":"154","severity":1,"message":"168","line":53,"column":6,"nodeType":"156","endLine":53,"endColumn":8,"suggestions":"192"},{"ruleId":"164","severity":1,"message":"165","line":164,"column":34,"nodeType":"166","messageId":"167","endLine":164,"endColumn":36},{"ruleId":"150","severity":1,"message":"193","line":1,"column":20,"nodeType":"152","messageId":"153","endLine":1,"endColumn":25},"no-unused-vars","'isAuth' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPopup'. Either include it or remove the dependency array.","ArrayExpression",["194"],"no-native-reassign",["195"],"no-negated-in-lhs",["196"],"'FormGroup' is defined but never used.","'Pagination' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["197"],"'IconButton' is defined but never used.","'InputAdornment' is defined but never used.","'TextField' is defined but never used.","'Slider' is defined but never used.","'FormControlLabel' is defined but never used.","'MenuItem' is defined but never used.","'Checkbox' is defined but never used.",["198"],"'Input' is defined but never used.","'Modal' is defined but never used.","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'open' is assigned a value but never used.",["199"],"'handleClose' is assigned a value but never used.","'editDetails' is assigned a value but never used.",["200"],"'useParams' is defined but never used.","'colorSet' is assigned a value but never used.",["201"],"'useEffect' is defined but never used.",["202"],["203"],"'Slide' is defined but never used.",{"desc":"204","fix":"205"},"no-global-assign","no-unsafe-negation",{"desc":"206","fix":"207"},{"desc":"206","fix":"208"},{"desc":"206","fix":"209"},{"desc":"206","fix":"210"},{"desc":"206","fix":"211"},{"desc":"206","fix":"212"},{"desc":"206","fix":"213"},"Update the dependencies array to be: [setPopup]",{"range":"214","text":"215"},"Update the dependencies array to be: [getData]",{"range":"216","text":"217"},{"range":"218","text":"217"},{"range":"219","text":"217"},{"range":"220","text":"217"},{"range":"221","text":"217"},{"range":"222","text":"217"},{"range":"223","text":"217"},[422,424],"[setPopup]",[16571,16573],"[getData]",[5987,5989],[3404,3406],[19293,19295],[21708,21710],[21447,21449],[1039,1041]]